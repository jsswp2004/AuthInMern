
// This section will help you get a list of all the records.
recordRoutes.route('/record').get(function (req, res) {
  let db_connect = dbo.getDb('employees')
  db_connect
    .collection('records')
    .find({})
    .toArray(function (err, result) {
      if (err) throw err
      res.json(result)
    })
})


// This section will help you get a single record by id
recordRoutes.route('/record/:id').get(function (req, res) {
  let db_connect = dbo.getDb()
  let myquery = { _id: ObjectId(req.params.id) }
  db_connect.collection('records').findOne(myquery, function (err, result) {
    if (err) throw err
    res.json(result)
  })
})


// This section will help you create a new record.
recordRoutes.route('/record/add').post(function (req, response) {
  let db_connect = dbo.getDb()
  //autocreate MRN
  const setMedicalRecordNumber = Math.floor(100000 + Math.random() * 900000)
  //autocreate visit number
  const setVisitNumber = Math.floor(1 + Math.random() * 99999)
  //calculating age
  const today = new Date()
  const birthDate = new Date(req.body.dateOfBirth)
  let age = today.getFullYear() - birthDate.getFullYear()
  const m = today.getMonth() - birthDate.getMonth()
  if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
    age--
  }
  let myobj = {
    medicalRecordNumber: setMedicalRecordNumber,
    visitNumber: setVisitNumber,
    firstName: req.body.firstName,
    lastName: req.body.lastName,
    middleName: req.body.middleName,
    gender: req.body.gender,
    race: req.body.race,
    dateOfBirth: req.body.dateOfBirth,
    age: age,
    language: req.body.language,
    address: req.body.address,
    city: req.body.city,
    zipCode: req.body.zipCode,
    state: req.body.state,
  }
  db_connect.collection('records').insertOne(myobj, function (err, res) {
    if (err) throw err
    response.json(res)
  })
})

// This section will help you update a record by id.
recordRoutes.route('/update/:id').post(function (req, response) {
  let db_connect = dbo.getDb()
  //calculating age
  const today = new Date()
  const birthDate = new Date(req.body.dateOfBirth)
  let age = today.getFullYear() - birthDate.getFullYear()
  const m = today.getMonth() - birthDate.getMonth()
  if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
    age--
  }  
  let myquery = { _id: ObjectId(req.params.id) }
  let newvalues = {
    $set: {
      medicalRecordNumber: req.body.medicalRecordNumber,
      visitNumber: req.body.visitNumber,
      firstName: req.body.firstName,
      lastName: req.body.lastName,
      middleName: req.body.middleName,
      gender: req.body.gender,
      race: req.body.race,
      dateOfBirth: req.body.dateOfBirth,
      age: age,
      language: req.body.language,
      address: req.body.address,
      city: req.body.city,
      zipCode: req.body.zipCode,
      state: req.body.state,
    },
  }
  db_connect
    .collection('records')
    .updateOne(myquery, newvalues, function (err, res) {
      if (err) throw err
      console.log('1 document updated')
      response.json(res)
    })
})

// This section will help you delete a record
recordRoutes.route('/record/:id').delete((req, response) => {
  let db_connect = dbo.getDb()
  let myquery = { _id: ObjectId(req.params.id) }
  db_connect.collection('records').deleteOne(myquery, function (err, obj) {
    if (err) throw err
    console.log('1 document record deleted')
    response.json(obj)
  })
})